@using System.Data.Entity.SqlServer
@using System.Globalization

@{
    ViewBag.Title = @"Production Ledger";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var permittee = new List<Permitees>() { new Permitees() { Id = 0, FirstName = "All" } };
    permittee.AddRange(new UnitOfWork().PermiteesRepo.Get());
}
@using (Ajax.BeginForm(new AjaxOptions() { Url = Url.Action("ProductionLedgerGridViewPartial", new { isSubmitted = true }), UpdateTargetId = "container", OnBegin = "showLoading()", OnComplete = "hideLoading()" }))
{
    <div class="row">
        <div class="col-lg-2">
            @{
                Html.DevExpress().ComboBox(settings =>
                {
                    settings.Name = "PermitteeId";
                    settings.Properties.TextField = "FullName";
                    settings.Properties.ValueField = "Id";
                    settings.Properties.Caption = "Permittee";
                    settings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
                    settings.Width = Unit.Percentage(100);
                    settings.Properties.Columns.Add("CompanyName");
                    settings.Properties.Columns.Add("FullName");
                      
                }).BindList(permittee).GetHtml();
            }
        </div>
        <div class="col-lg-2">
            @{
                Html.DevExpress().DropDownEdit(settings =>
                {
                    settings.Name = "_PermitteeTypeId";
                    //settings.Properties.TextField = "PermiteeTypeName";
                    //settings.Properties.ValueField = "Id";
                    settings.Properties.Caption = "Permittee Type";
                    settings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
                    settings.Width = Unit.Percentage(100);
                    //.BindList(new UnitOfWork().PermiteeTypesRepo.Get())

                    settings.SetDropDownWindowTemplateContent(c =>
                    {

                        @Html.DevExpress().ListBox(listBoxSettings =>
                        {
                            listBoxSettings.Name = "PermitteeTypeId";
                            listBoxSettings.ControlStyle.Border.BorderWidth = 0;
                            listBoxSettings.ControlStyle.BorderBottom.BorderWidth = 1;
                            listBoxSettings.Height = Unit.Pixel(200);
                            listBoxSettings.Width = Unit.Percentage(100);

                            listBoxSettings.Properties.EnableSelectAll = true;
                            listBoxSettings.Properties.FilteringSettings.ShowSearchUI = true;
                            listBoxSettings.Properties.SelectionMode = ListEditSelectionMode.CheckColumn;
                            foreach (var i in new UnitOfWork().PermiteeTypesRepo.Get())
                            {
                                //listBoxSettings.Properties.Items.Add("Chrome", "0").Selected = true;
                                listBoxSettings.Properties.Items.Add(i.PermiteeTypeName, i.Id);
                            }

                            listBoxSettings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e){updateText(s,e)}";
                            listBoxSettings.Properties.ClientSideEvents.Init = "function(s,e){updateText(s,e)}";
                        }).Render();
                    });
                }).GetHtml();
            }
        </div>
        <div class="col-lg-2">
            @{
                Html.DevExpress().ComboBox(settings =>
                {
                    settings.Name = "Month";
                    settings.Properties.TextField = "MonthName";
                    settings.Properties.ValueField = "Month";
                    settings.Properties.Caption = "Month";
                    settings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
                    settings.Width = Unit.Percentage(100);
                }).BindList(new UnitOfWork().ProductionsRepo.Fetch().OrderBy(m => m.Id).GroupBy(x => SqlFunctions.DatePart("month", x.DateCreated)).Select(x => new { Month = x.Key}).ToList().Select(x=>new{x.Month, MonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(x.Month?.ToInt()??1) })).GetHtml();
            }
        </div>
        <div class="col-lg-2">
            @{
                Html.DevExpress().ComboBox(settings =>
                {
                    settings.Name = "Year";
                    settings.Properties.TextField = "Year";
                    settings.Properties.ValueField = "Year";
                    settings.Properties.Caption = "Year";
                    settings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
                    settings.Width = Unit.Percentage(100);
                }).BindList(new UnitOfWork().ProductionsRepo.Fetch().OrderBy(m => m.Id).GroupBy(x => SqlFunctions.DatePart("year", x.ProductionDate)).Select(x => new { Year = x.Key }).ToList()).GetHtml();
            }
        </div>
        <div class="col-lg-3">
            @{
                Html.DevExpress().Button(settings =>
                {
                    settings.Name = "btnSubmit";
                    settings.UseSubmitBehavior = true;
                    settings.Text = "Submit";
                    settings.Style.Add(HtmlTextWriterStyle.MarginTop, "40px;");
                }).GetHtml();
            }
        </div>
    </div>
}
<div id="container">
    @{
        Html.DevExpress().WebDocumentViewer(settings =>
        {
            settings.Name = "webDocumentViewer";
        }).Bind(new XtraReport()).GetHtml();
    }

</div>
<script type="text/javascript">
    var textSeparator = ";";
    function updateText() {
        var selectedItems = PermitteeTypeId.GetSelectedItems();
        _PermitteeTypeId.SetText(getSelectedItemsText(selectedItems));
    }
    function synchronizeListBoxValues(dropDown, args) {
        PermitteeTypeId.UnselectAll();
        var texts = dropDown.GetText().split(textSeparator);
        var values = getValuesByTexts(texts);
        PermitteeTypeId.SelectValues(values);
        updateText(); // for remove non-existing texts
    }
    function getSelectedItemsText(items) {
        var texts = [];
        for (var i = 0; i < items.length; i++)
            texts.push(items[i].text);
        return texts.join(textSeparator);
    }
    function getValuesByTexts(texts) {
        var actualValues = [];
        var item;
        for (var i = 0; i < texts.length; i++) {
            item = PermitteeTypeId.FindItemByText(texts[i]);
            if (item != null)
                actualValues.push(item.value);
        }
        return actualValues;
    }
</script>